{"ast":null,"code":"import api from './apiConfig';\nconst GameService = {\n  createGameSession: async startWithPlayer => {\n    try {\n      const response = await api.post('/game/create_game_session', {\n        startWithPlayer\n      });\n      const data = response.data;\n      return {\n        ...data,\n        sessionId: data.id,\n        board: typeof data.board === 'string' ? JSON.parse(data.board) : data.board,\n        status: data.status || 'ongoing',\n        playerTurn: data.currentPlayer === 'x'\n      };\n    } catch (error) {\n      var _error$response;\n      throw ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || {\n        error: 'Failed to create game session'\n      };\n    }\n  },\n  getGameSession: async sessionId => {\n    try {\n      const response = await api.get(`/game?sessionId=${sessionId}`);\n      const data = response.data;\n      return {\n        ...data,\n        board: typeof data.board === 'string' ? JSON.parse(data.board) : data.board,\n        status: data.status || 'ongoing',\n        playerTurn: data.currentPlayer === 'x'\n      };\n    } catch (error) {\n      var _error$response2;\n      throw ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) || {\n        error: 'Failed to get game session'\n      };\n    }\n  },\n  checkBoard: async board => {\n    try {\n      const response = await api.post('/game/check_board', {\n        board\n      });\n      return {\n        ...response.data,\n        status: response.data.status || response.data.gameStatus || 'ongoing'\n      };\n    } catch (error) {\n      var _error$response3;\n      throw ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.data) || {\n        error: 'Failed to check board status'\n      };\n    }\n  }\n};\nexport default GameService;","map":{"version":3,"names":["api","GameService","createGameSession","startWithPlayer","response","post","data","sessionId","id","board","JSON","parse","status","playerTurn","currentPlayer","error","_error$response","getGameSession","get","_error$response2","checkBoard","gameStatus","_error$response3"],"sources":["/Users/abhishekverma/Desktop/auth-game-session/src/api/gameService.js"],"sourcesContent":["import api from './apiConfig';\n\nconst GameService = {\n  createGameSession: async (startWithPlayer) => {\n    try {\n      const response = await api.post('/game/create_game_session', {\n        startWithPlayer,\n      });\n\n      const data = response.data;\n      return {\n        ...data,\n        sessionId: data.id,\n        board: typeof data.board === 'string' ? JSON.parse(data.board) : data.board,\n        status: data.status || 'ongoing',\n        playerTurn: data.currentPlayer === 'x',\n      };\n    } catch (error) {\n      throw error.response?.data || { error: 'Failed to create game session' };\n    }\n  },\n\n  getGameSession: async (sessionId) => {\n    try {\n      const response = await api.get(`/game?sessionId=${sessionId}`);\n\n      const data = response.data;\n      return {\n        ...data,\n        board: typeof data.board === 'string' ? JSON.parse(data.board) : data.board,\n        status: data.status || 'ongoing',\n        playerTurn: data.currentPlayer === 'x',\n      };\n    } catch (error) {\n      throw error.response?.data || { error: 'Failed to get game session' };\n    }\n  },\n\n  checkBoard: async (board) => {\n    try {\n      const response = await api.post('/game/check_board', { board });\n      return {\n        ...response.data,\n        status: response.data.status || response.data.gameStatus || 'ongoing',\n      };\n    } catch (error) {\n      throw error.response?.data || { error: 'Failed to check board status' };\n    }\n  },\n};\n\nexport default GameService; "],"mappings":"AAAA,OAAOA,GAAG,MAAM,aAAa;AAE7B,MAAMC,WAAW,GAAG;EAClBC,iBAAiB,EAAE,MAAOC,eAAe,IAAK;IAC5C,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMJ,GAAG,CAACK,IAAI,CAAC,2BAA2B,EAAE;QAC3DF;MACF,CAAC,CAAC;MAEF,MAAMG,IAAI,GAAGF,QAAQ,CAACE,IAAI;MAC1B,OAAO;QACL,GAAGA,IAAI;QACPC,SAAS,EAAED,IAAI,CAACE,EAAE;QAClBC,KAAK,EAAE,OAAOH,IAAI,CAACG,KAAK,KAAK,QAAQ,GAAGC,IAAI,CAACC,KAAK,CAACL,IAAI,CAACG,KAAK,CAAC,GAAGH,IAAI,CAACG,KAAK;QAC3EG,MAAM,EAAEN,IAAI,CAACM,MAAM,IAAI,SAAS;QAChCC,UAAU,EAAEP,IAAI,CAACQ,aAAa,KAAK;MACrC,CAAC;IACH,CAAC,CAAC,OAAOC,KAAK,EAAE;MAAA,IAAAC,eAAA;MACd,MAAM,EAAAA,eAAA,GAAAD,KAAK,CAACX,QAAQ,cAAAY,eAAA,uBAAdA,eAAA,CAAgBV,IAAI,KAAI;QAAES,KAAK,EAAE;MAAgC,CAAC;IAC1E;EACF,CAAC;EAEDE,cAAc,EAAE,MAAOV,SAAS,IAAK;IACnC,IAAI;MACF,MAAMH,QAAQ,GAAG,MAAMJ,GAAG,CAACkB,GAAG,CAAC,mBAAmBX,SAAS,EAAE,CAAC;MAE9D,MAAMD,IAAI,GAAGF,QAAQ,CAACE,IAAI;MAC1B,OAAO;QACL,GAAGA,IAAI;QACPG,KAAK,EAAE,OAAOH,IAAI,CAACG,KAAK,KAAK,QAAQ,GAAGC,IAAI,CAACC,KAAK,CAACL,IAAI,CAACG,KAAK,CAAC,GAAGH,IAAI,CAACG,KAAK;QAC3EG,MAAM,EAAEN,IAAI,CAACM,MAAM,IAAI,SAAS;QAChCC,UAAU,EAAEP,IAAI,CAACQ,aAAa,KAAK;MACrC,CAAC;IACH,CAAC,CAAC,OAAOC,KAAK,EAAE;MAAA,IAAAI,gBAAA;MACd,MAAM,EAAAA,gBAAA,GAAAJ,KAAK,CAACX,QAAQ,cAAAe,gBAAA,uBAAdA,gBAAA,CAAgBb,IAAI,KAAI;QAAES,KAAK,EAAE;MAA6B,CAAC;IACvE;EACF,CAAC;EAEDK,UAAU,EAAE,MAAOX,KAAK,IAAK;IAC3B,IAAI;MACF,MAAML,QAAQ,GAAG,MAAMJ,GAAG,CAACK,IAAI,CAAC,mBAAmB,EAAE;QAAEI;MAAM,CAAC,CAAC;MAC/D,OAAO;QACL,GAAGL,QAAQ,CAACE,IAAI;QAChBM,MAAM,EAAER,QAAQ,CAACE,IAAI,CAACM,MAAM,IAAIR,QAAQ,CAACE,IAAI,CAACe,UAAU,IAAI;MAC9D,CAAC;IACH,CAAC,CAAC,OAAON,KAAK,EAAE;MAAA,IAAAO,gBAAA;MACd,MAAM,EAAAA,gBAAA,GAAAP,KAAK,CAACX,QAAQ,cAAAkB,gBAAA,uBAAdA,gBAAA,CAAgBhB,IAAI,KAAI;QAAES,KAAK,EAAE;MAA+B,CAAC;IACzE;EACF;AACF,CAAC;AAED,eAAed,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}