{"ast":null,"code":"var _s = $RefreshSig$();\n//TODO: Code optimization required\n\nimport { useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport GameService from '../api/gameService';\nimport PlayerService from '../api/playerService';\nimport SystemService from '../api/systemService';\nimport { clearError as clearGameError, gameFailure, gameRequest, resetGame as resetGameAction, setGameData, setPlayerMove, updateBoard } from '../redux/slices/gameSlice';\n\n//TODO: We have more scope of improvements\n\nconst useGame = () => {\n  _s();\n  const dispatch = useDispatch();\n  const gameState = useSelector(state => state.game);\n  const createNewGameSession = useCallback(async startWithPlayer => {\n    try {\n      dispatch(gameRequest());\n      const data = await GameService.createGameSession(startWithPlayer);\n      dispatch(setGameData({\n        ...data,\n        startWithPlayer\n      }));\n      return data;\n    } catch (error) {\n      dispatch(gameFailure(error.message || 'Failed to create game session'));\n      throw error;\n    }\n  }, [dispatch]);\n  const getExistingGameSession = useCallback(async sessionId => {\n    try {\n      dispatch(gameRequest());\n      const data = await GameService.getGameSession(sessionId);\n      dispatch(setGameData({\n        ...data,\n        startWithPlayer: data.playerTurn\n      }));\n      return data;\n    } catch (error) {\n      dispatch(gameFailure(error.message || 'Failed to get game session'));\n      throw error;\n    }\n  }, [dispatch]);\n  const makePlayerMove = useCallback(async (board, row, col, sessionId) => {\n    try {\n      dispatch(setPlayerMove({\n        row,\n        col\n      }));\n      dispatch(gameRequest());\n      const newBoard = board.map(row => [...row]);\n      newBoard[row][col] = -1;\n      const data = await PlayerService.playerMove(newBoard, sessionId);\n      dispatch(updateBoard({\n        board: data.board,\n        status: data.status,\n        isPlayerTurn: false\n      }));\n      return data;\n    } catch (error) {\n      dispatch(gameFailure(error.message || 'Failed to make player move'));\n      throw error;\n    }\n  }, [dispatch]);\n  const makeComputerMove = useCallback(async (board, sessionId) => {\n    try {\n      dispatch(gameRequest());\n      const boardCopy = board.map(row => [...row]);\n      const data = await SystemService.computerMove(boardCopy, sessionId);\n      dispatch(updateBoard({\n        board: data.board,\n        status: data.status,\n        isPlayerTurn: true\n      }));\n      return data;\n    } catch (error) {\n      dispatch(gameFailure(error.message || 'Failed to make PC move'));\n      throw error;\n    }\n  }, [dispatch]);\n  const checkBoardStatus = useCallback(async board => {\n    try {\n      dispatch(gameRequest());\n      const data = await GameService.checkBoard(board);\n      dispatch(updateBoard({\n        status: data.gameStatus || data.status,\n        isPlayerTurn: true\n      }));\n      return data;\n    } catch (error) {\n      dispatch(gameFailure(error.message || 'Failed to check board status'));\n      throw error;\n    }\n  }, [dispatch]);\n  const resetGame = useCallback(() => {\n    dispatch(resetGameAction());\n  }, [dispatch]);\n  const clearError = useCallback(() => {\n    dispatch(clearGameError());\n  }, [dispatch]);\n  return {\n    ...gameState,\n    createNewGameSession,\n    getExistingGameSession,\n    makePlayerMove,\n    makePcMove,\n    checkBoardStatus,\n    resetGame,\n    clearError\n  };\n};\n_s(useGame, \"dIzuzmRb6dwP/oSx8gJ8pLX1Q8o=\", false, function () {\n  return [useDispatch, useSelector];\n});\nexport default useGame;","map":{"version":3,"names":["useCallback","useDispatch","useSelector","GameService","PlayerService","SystemService","clearError","clearGameError","gameFailure","gameRequest","resetGame","resetGameAction","setGameData","setPlayerMove","updateBoard","useGame","_s","dispatch","gameState","state","game","createNewGameSession","startWithPlayer","data","createGameSession","error","message","getExistingGameSession","sessionId","getGameSession","playerTurn","makePlayerMove","board","row","col","newBoard","map","playerMove","status","isPlayerTurn","makeComputerMove","boardCopy","computerMove","checkBoardStatus","checkBoard","gameStatus","makePcMove"],"sources":["/Users/abhishekverma/Desktop/Tic-Tac-Toe/src/hooks/useGame.js"],"sourcesContent":["//TODO: Code optimization required\n\nimport { useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport GameService from '../api/gameService';\nimport PlayerService from '../api/playerService';\nimport SystemService from '../api/systemService';\nimport {\n  clearError as clearGameError,\n  gameFailure,\n  gameRequest,\n  resetGame as resetGameAction,\n  setGameData,\n  setPlayerMove,\n  updateBoard\n} from '../redux/slices/gameSlice';\n\n//TODO: We have more scope of improvements\n\nconst useGame = () => {\n  const dispatch = useDispatch();\n  const gameState = useSelector((state) => state.game);\n\n  const createNewGameSession = useCallback(async (startWithPlayer) => {\n    try {\n      dispatch(gameRequest());\n      const data = await GameService.createGameSession(startWithPlayer);\n\n      dispatch(setGameData({\n        ...data,\n        startWithPlayer\n      }));\n\n      return data;\n    } catch (error) {\n      dispatch(gameFailure(error.message || 'Failed to create game session'));\n      throw error;\n    }\n  }, [dispatch]);\n\n  const getExistingGameSession = useCallback(async (sessionId) => {\n    try {\n      dispatch(gameRequest());\n      const data = await GameService.getGameSession(sessionId);\n\n      dispatch(setGameData({\n        ...data,\n        startWithPlayer: data.playerTurn\n      }));\n\n      return data;\n    } catch (error) {\n      dispatch(gameFailure(error.message || 'Failed to get game session'));\n      throw error;\n    }\n  }, [dispatch]);\n\n  const makePlayerMove = useCallback(async (board, row, col, sessionId) => {\n    try {\n      dispatch(setPlayerMove({ row, col }));\n      dispatch(gameRequest());\n\n      const newBoard = board.map(row => [...row]);\n      newBoard[row][col] = -1;\n\n      const data = await PlayerService.playerMove(newBoard, sessionId);\n\n      dispatch(updateBoard({\n        board: data.board,\n        status: data.status,\n        isPlayerTurn: false\n      }));\n\n      return data;\n    } catch (error) {\n      dispatch(gameFailure(error.message || 'Failed to make player move'));\n      throw error;\n    }\n  }, [dispatch]);\n\n  const makeComputerMove = useCallback(async (board, sessionId) => {\n    try {\n      dispatch(gameRequest());\n      const boardCopy = board.map(row => [...row]);\n\n      const data = await SystemService.computerMove(boardCopy, sessionId);\n\n      dispatch(updateBoard({\n        board: data.board,\n        status: data.status,\n        isPlayerTurn: true\n      }));\n\n      return data;\n    } catch (error) {\n      dispatch(gameFailure(error.message || 'Failed to make PC move'));\n      throw error;\n    }\n  }, [dispatch]);\n\n  const checkBoardStatus = useCallback(async (board) => {\n    try {\n      dispatch(gameRequest());\n      const data = await GameService.checkBoard(board);\n\n      dispatch(updateBoard({\n        status: data.gameStatus || data.status,\n        isPlayerTurn: true\n      }));\n\n      return data;\n    } catch (error) {\n      dispatch(gameFailure(error.message || 'Failed to check board status'));\n      throw error;\n    }\n  }, [dispatch]);\n\n  const resetGame = useCallback(() => {\n    dispatch(resetGameAction());\n  }, [dispatch]);\n\n  const clearError = useCallback(() => {\n    dispatch(clearGameError());\n  }, [dispatch]);\n\n  return {\n    ...gameState,\n    createNewGameSession,\n    getExistingGameSession,\n    makePlayerMove,\n    makePcMove,\n    checkBoardStatus,\n    resetGame,\n    clearError\n  };\n};\n\nexport default useGame; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}