{"ast":null,"code":"import { configureStore } from '@reduxjs/toolkit';\nimport { combineReducers } from 'redux';\nimport { persistReducer, persistStore } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport authReducer, { logoutSuccess } from './slices/authSlice';\nimport gameReducer from './slices/gameSlice';\nconst appReducer = combineReducers({\n  auth: authReducer,\n  game: gameReducer\n});\nconst rootReducer = (state, action) => {\n  if (action.type === logoutSuccess.type) {\n    const {\n      auth\n    } = state;\n    state = {\n      auth\n    };\n  }\n  return appReducer(state, action);\n};\n\n//TODO: Need more optimziation \n\nconst persistConfig = {\n  key: 'root',\n  storage,\n  whitelist: ['auth'],\n  blacklist: ['game']\n};\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\nexport const store = configureStore({\n  reducer: persistedReducer,\n  middleware: getDefaultMiddleware => getDefaultMiddleware({\n    serializableCheck: false\n  })\n});\nexport const persistor = persistStore(store);","map":{"version":3,"names":["configureStore","combineReducers","persistReducer","persistStore","storage","authReducer","logoutSuccess","gameReducer","appReducer","auth","game","rootReducer","state","action","type","persistConfig","key","whitelist","blacklist","persistedReducer","store","reducer","middleware","getDefaultMiddleware","serializableCheck","persistor"],"sources":["/Users/abhishekverma/Desktop/Tic-Tac-Toe/src/redux/store.js"],"sourcesContent":["import { configureStore } from '@reduxjs/toolkit';\nimport { combineReducers } from 'redux';\nimport { persistReducer, persistStore } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\n\nimport authReducer, { logoutSuccess } from './slices/authSlice';\nimport gameReducer from './slices/gameSlice';\n\nconst appReducer = combineReducers({\n  auth: authReducer,\n  game: gameReducer,\n});\n\nconst rootReducer = (state, action) => {\n  if (action.type === logoutSuccess.type) {\n    const { auth } = state;\n    state = { auth };\n  }\n\n  return appReducer(state, action);\n};\n\n//TODO: Need more optimziation \n\nconst persistConfig = {\n  key: 'root',\n  storage,\n  whitelist: ['auth'],\n  blacklist: ['game'],\n};\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n\nexport const store = configureStore({\n  reducer: persistedReducer,\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware({\n      serializableCheck: false,\n    }),\n});\n\nexport const persistor = persistStore(store); "],"mappings":"AAAA,SAASA,cAAc,QAAQ,kBAAkB;AACjD,SAASC,eAAe,QAAQ,OAAO;AACvC,SAASC,cAAc,EAAEC,YAAY,QAAQ,eAAe;AAC5D,OAAOC,OAAO,MAAM,2BAA2B;AAE/C,OAAOC,WAAW,IAAIC,aAAa,QAAQ,oBAAoB;AAC/D,OAAOC,WAAW,MAAM,oBAAoB;AAE5C,MAAMC,UAAU,GAAGP,eAAe,CAAC;EACjCQ,IAAI,EAAEJ,WAAW;EACjBK,IAAI,EAAEH;AACR,CAAC,CAAC;AAEF,MAAMI,WAAW,GAAGA,CAACC,KAAK,EAAEC,MAAM,KAAK;EACrC,IAAIA,MAAM,CAACC,IAAI,KAAKR,aAAa,CAACQ,IAAI,EAAE;IACtC,MAAM;MAAEL;IAAK,CAAC,GAAGG,KAAK;IACtBA,KAAK,GAAG;MAAEH;IAAK,CAAC;EAClB;EAEA,OAAOD,UAAU,CAACI,KAAK,EAAEC,MAAM,CAAC;AAClC,CAAC;;AAED;;AAEA,MAAME,aAAa,GAAG;EACpBC,GAAG,EAAE,MAAM;EACXZ,OAAO;EACPa,SAAS,EAAE,CAAC,MAAM,CAAC;EACnBC,SAAS,EAAE,CAAC,MAAM;AACpB,CAAC;AAED,MAAMC,gBAAgB,GAAGjB,cAAc,CAACa,aAAa,EAAEJ,WAAW,CAAC;AAEnE,OAAO,MAAMS,KAAK,GAAGpB,cAAc,CAAC;EAClCqB,OAAO,EAAEF,gBAAgB;EACzBG,UAAU,EAAGC,oBAAoB,IAC/BA,oBAAoB,CAAC;IACnBC,iBAAiB,EAAE;EACrB,CAAC;AACL,CAAC,CAAC;AAEF,OAAO,MAAMC,SAAS,GAAGtB,YAAY,CAACiB,KAAK,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}