{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst createEmptyBoard = () => {\n  return [[0, 0, 0], [0, 0, 0], [0, 0, 0]];\n};\nconst initialState = {\n  sessionId: null,\n  board: createEmptyBoard(),\n  gameStatus: 'idle',\n  startWithPlayer: true,\n  playerTurn: true,\n  loading: false,\n  error: null\n};\nconst gameSlice = createSlice({\n  name: 'game',\n  initialState,\n  reducers: {\n    gameRequest: state => {\n      state.loading = true;\n      state.error = null;\n    },\n    gameFailure: (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    },\n    setGameData: (state, action) => {\n      state.loading = false;\n      state.sessionId = action.payload.id;\n      if (typeof action.payload.board === 'string') {\n        try {\n          state.board = JSON.parse(action.payload.board);\n        } catch (e) {\n          state.board = createEmptyBoard();\n          console.error('Error parsing board data:', e);\n        }\n      } else if (Array.isArray(action.payload.board)) {\n        state.board = action.payload.board;\n      } else {\n        state.board = createEmptyBoard();\n      }\n      state.gameStatus = action.payload.status || 'ongoing';\n      state.startWithPlayer = action.payload.startWithPlayer;\n      if (action.payload.currentPlayer) {\n        state.playerTurn = action.payload.currentPlayer === 'x';\n      } else {\n        state.playerTurn = action.payload.startWithPlayer;\n      }\n    },\n    updateBoard: (state, action) => {\n      state.loading = false;\n      if (typeof action.payload.board === 'string') {\n        try {\n          state.board = JSON.parse(action.payload.board);\n        } catch (e) {\n          console.error('Error parsing board data:', e);\n        }\n      } else if (Array.isArray(action.payload.board)) {\n        state.board = action.payload.board;\n      }\n      state.gameStatus = action.payload.status || 'ongoing';\n      state.playerTurn = action.payload.isPlayerTurn;\n    },\n    setPlayerMove: (state, action) => {\n      const {\n        row,\n        col\n      } = action.payload;\n      if (state.board[row] && typeof state.board[row][col] !== 'undefined') {\n        state.board = state.board.map(rowArr => [...rowArr]);\n        state.board[row][col] = -1;\n      }\n      state.playerTurn = false;\n    },\n    resetGame: state => {\n      state.sessionId = null;\n      state.board = createEmptyBoard();\n      state.gameStatus = 'idle';\n      state.playerTurn = true;\n      state.error = null;\n    },\n    clearError: state => {\n      state.error = null;\n    }\n  }\n});\nexport const {\n  gameRequest,\n  gameFailure,\n  setGameData,\n  updateBoard,\n  setPlayerMove,\n  resetGame,\n  clearError\n} = gameSlice.actions;\nexport default gameSlice.reducer;","map":{"version":3,"names":["createSlice","createEmptyBoard","initialState","sessionId","board","gameStatus","startWithPlayer","playerTurn","loading","error","gameSlice","name","reducers","gameRequest","state","gameFailure","action","payload","setGameData","id","JSON","parse","e","console","Array","isArray","status","currentPlayer","updateBoard","isPlayerTurn","setPlayerMove","row","col","map","rowArr","resetGame","clearError","actions","reducer"],"sources":["/Users/abhishekverma/Desktop/auth-game-session/src/redux/slices/gameSlice.js"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\nconst createEmptyBoard = () => {\n  return [\n    [0, 0, 0],\n    [0, 0, 0],\n    [0, 0, 0]\n  ];\n};\n\nconst initialState = {\n  sessionId: null,\n  board: createEmptyBoard(),\n  gameStatus: 'idle',\n  startWithPlayer: true,\n  playerTurn: true,\n  loading: false,\n  error: null,\n};\n\nconst gameSlice = createSlice({\n  name: 'game',\n  initialState,\n  reducers: {\n    gameRequest: (state) => {\n      state.loading = true;\n      state.error = null;\n    },\n\n    gameFailure: (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    },\n\n    setGameData: (state, action) => {\n      state.loading = false;\n      state.sessionId = action.payload.id;\n\n      if (typeof action.payload.board === 'string') {\n        try {\n          state.board = JSON.parse(action.payload.board);\n        } catch (e) {\n          state.board = createEmptyBoard();\n          console.error('Error parsing board data:', e);\n        }\n      } else if (Array.isArray(action.payload.board)) {\n        state.board = action.payload.board;\n      } else {\n        state.board = createEmptyBoard();\n      }\n\n      state.gameStatus = action.payload.status || 'ongoing';\n      state.startWithPlayer = action.payload.startWithPlayer;\n\n      if (action.payload.currentPlayer) {\n        state.playerTurn = action.payload.currentPlayer === 'x';\n      } else {\n        state.playerTurn = action.payload.startWithPlayer;\n      }\n    },\n\n    updateBoard: (state, action) => {\n      state.loading = false;\n\n      if (typeof action.payload.board === 'string') {\n        try {\n          state.board = JSON.parse(action.payload.board);\n        } catch (e) {\n          console.error('Error parsing board data:', e);\n        }\n      } else if (Array.isArray(action.payload.board)) {\n        state.board = action.payload.board;\n      }\n\n      state.gameStatus = action.payload.status || 'ongoing';\n      state.playerTurn = action.payload.isPlayerTurn;\n    },\n\n    setPlayerMove: (state, action) => {\n      const { row, col } = action.payload;\n      if (state.board[row] && typeof state.board[row][col] !== 'undefined') {\n        state.board = state.board.map(rowArr => [...rowArr]);\n        state.board[row][col] = -1;\n      }\n      state.playerTurn = false;\n    },\n\n    resetGame: (state) => {\n      state.sessionId = null;\n      state.board = createEmptyBoard();\n      state.gameStatus = 'idle';\n      state.playerTurn = true;\n      state.error = null;\n    },\n\n    clearError: (state) => {\n      state.error = null;\n    },\n  },\n});\n\nexport const {\n  gameRequest,\n  gameFailure,\n  setGameData,\n  updateBoard,\n  setPlayerMove,\n  resetGame,\n  clearError\n} = gameSlice.actions;\n\nexport default gameSlice.reducer; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}